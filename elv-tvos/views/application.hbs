/*
JavaScript methods to load data from a server and play the corresponding media.
Note: This is a template file which serves application.js with injected data.
*/

var baseURL;
var nodes;
var currentHost;
var launchOptions;

//Templates injected by the server
var updateInterval = 60000;
var sessionTag;
var configUrl;

var getJSON = function (url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open("get", url, true);
    xhr.responseType = "json";
    xhr.onload = function () {
      var status = xhr.status;
      if (status == 200) {
        resolve(xhr.response);
      } else {
        reject(status);
      }
    };
    xhr.send();
  });
};

function loadingTemplate() {
  var template =
    "<document><loadingTemplate><activityIndicator><text>Loading</text></activityIndicator></loadingTemplate></document>";
  var templateParser = new DOMParser();
  var parsedTemplate = templateParser.parseFromString(
    template,
    "application/xml"
  );

  var currentDoc = getActiveDocument();
  navigationDocument.pushDocument(parsedTemplate, currentDoc);
}

var fetch = function (url, responseType) {
  console.log("fetch: " + url);
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open("get", url, true);
    xhr.responseType = responseType;
    xhr.onload = function () {
      var status = xhr.status;
      console.log("fetch status: " + status);
      if (status == 200) {
        resolve(xhr.response);
      } else {
        reject(status);
      }
    };
    xhr.addEventListener(
      "load",
      function () {
        console.log("fetch load status: " + xhr.status);
      },
      false
    );
    xhr.send();
  });
};

async function documentOnSelect(event) {
  try {
    const target = event.target;
    const ele = target.parentNode;
    const feature = ele.getFeature("MenuBarDocument");
    if (!feature) {
      return;
    }
    // Always get a new featureDoc since the old one might be stale from a reload
    const documentURL = baseURL + target.getAttribute("documentURL");
    console.log("onSelect for " + documentURL);
    let docText = await fetch(documentURL, "text");
    let resolvedText = resolveTemplate(docText);
    console.log(`Resolved for document: ${documentURL} \n ${resolvedText}`);
    var featureDoc = parser.parseFromString(resolvedText, "application/xml");
    feature.setDocument(featureDoc, target);
    console.log("Document set for menuItem.");
  } catch (e) {
    var alert = createAlert(
      "Page Load Error",
      "There was an error attempting to load the homepage.\n\n Please check your network connection and try again later."
    );
    navigationDocument.presentModal(alert);
  }
}

function resolveTemplate(text) {
  // compile the template
  var template = Handlebars.compile(text);
  var queryParams = `&session_id=${sessionTag}&app_id=${Device.appIdentifier}&app_version=${Device.appVersion}&system_version=${Device.systemVersion}&system_lang=${Settings.language}`;
  var resolved = template({
    host: currentHost,
    params: queryParams,
    fabric_node: currentHost,
    app_id: Device.appIdentifier,
    app_version: Device.appVersion,
    session_id: sessionTag,
    system_version: Device.systemVersion,
    system_lang: Settings.language,
  });
  return resolved;
}

function getTemplate(extension) {
  var templateXHR = new XMLHttpRequest();
  var url = baseURL + extension;
  console.log("Loading template: " + url);

  // loadingTemplate();
  templateXHR.responseType = "text";
  templateXHR.addEventListener(
    "load",
    function () {
      replaceTemplate(templateXHR.responseText);
    },
    false
  );
  templateXHR.open("GET", url, true);
  templateXHR.send();
}

function pushTemplate(text) {
  // compile the template
  let resolved = resolveTemplate(text);
  console.log("Resolved Template: " + resolved);
  let parser = new DOMParser();
  let document = parser.parseFromString(resolved, "application/xml");
  document.addEventListener("select", async (event) => {
    try {
      const target = event.target;
      const ele = target.parentNode;
      const feature = ele.getFeature("MenuBarDocument");
      if (!feature) {
        return;
      }
      // Always get a new featureDoc since the old one might be stale from a reload
      const documentURL = baseURL + target.getAttribute("documentURL");
      console.log("onSelect for " + documentURL);
      let docText = await fetch(documentURL, "text");
      let resolvedText = resolveTemplate(docText);
      console.log(`Resolved for document: ${documentURL} \n ${resolvedText}`);
      let featureDoc = parser.parseFromString(resolvedText, "application/xml");
      feature.setDocument(featureDoc, target);
      console.log("Document set for menuItem.");
    } catch (e) {
      let alert = createAlert(
        "Page Load Error",
        "There was an error attempting to load the homepage.\n\n Please check your network connection and try again later."
      );
      navigationDocument.presentModal(alert);
    }
  });
  navigationDocument.pushDocument(document);
  return document;
}

function replaceTemplate(text) {
  let resolved = resolveTemplate(text);
  console.log("replaceTemplate: " + resolved);
  let parser = new DOMParser();
  let document = parser.parseFromString(resolved, "application/xml");
  document.addEventListener("select", async (event) => {
    try {
      const target = event.target;
      const ele = target.parentNode;
      const feature = ele.getFeature("MenuBarDocument");
      if (!feature) {
        return;
      }
      // Always get a new featureDoc since the old one might be stale from a reload
      const documentURL = baseURL + target.getAttribute("documentURL");
      console.log("onSelect for " + documentURL);
      let docText = await fetch(documentURL, "text");
      let resolvedText = resolveTemplate(docText);
      console.log(`Resolved for document: ${documentURL} \n ${resolvedText}`);
      let featureDoc = parser.parseFromString(resolvedText, "application/xml");
      feature.setDocument(featureDoc, target);
      console.log("Document set for menuItem.");
    } catch (e) {
      let alert = createAlert(
        "Page Load Error",
        "There was an error attempting to load the homepage.\n\n Please check your network connection and try again later."
      );
      navigationDocument.presentModal(alert);
    }
  });
  var currentDoc = getActiveDocument();
  if (!currentDoc) {
    navigationDocument.pushDocument(document);
  } else {
    navigationDocument.replaceDocument(document, currentDoc);
  }
  return document;
}

function playPlaylistTitle(index) {
  console.log("PLAY PLAYLIST ITEM: " + index);
}

function playMedia(mediaURL, mediaType) {
  console.log("playMedia: " + mediaURL);
  var singleMediaItem = new MediaItem(mediaType, mediaURL);
  var mediaList = new Playlist();

  mediaList.push(singleMediaItem);
  var myPlayer = new Player();
  myPlayer.addEventListener("stateDidChange", (event) => {
    console.log("player stateDidChange " + JSON.stringify(event, 0, 2));
    if (event.state == "end") {
    }
  });
  myPlayer.playlist = mediaList;
  myPlayer.play();
}

async function loadPlaylistTitle(siteIndex, playlistIndex, index) {
  //XXX: siteIndex is not passed for some reason
  console.log(
    "LOAD PLAYLIST ITEM: Site: " +
      siteIndex +
      " playlist index: " +
      playlistIndex +
      " index: " +
      index
  );
  const documentURL =
    baseURL + "detail.hbs/" + siteIndex + "/" + playlistIndex + "/" + index;
  let text = await fetch(documentURL, "text");
  var template = Handlebars.compile(text);
  var params = `&session_id=${sessionTag}&app_id=${Device.appIdentifier}&app_version=${Device.appVersion}&system_version=${Device.systemVersion}&system_lang=${Settings.language}`;
  var resolvedText = template({
    params,
    host: currentHost,
  });

  let document = pushTemplate(resolvedText);
}

async function loadTitle(versionHash) {
  //XXX: siteIndex is not passed for some reason
  console.log("LOAD TITLE:" + versionHash);
  const documentURL = baseURL + "detailhash.hbs/" + versionHash;
  let text = await fetch(documentURL, "text");
  var template = Handlebars.compile(text);
  var params = `&session_id=${sessionTag}&app_id=${Device.appIdentifier}&app_version=${Device.appVersion}&system_version=${Device.systemVersion}&system_lang=${Settings.language}`;
  var resolvedText = template({
    params,
    host: currentHost,
  });

  let document = pushTemplate(resolvedText);
}

function getHero() {
  return baseURL + "logo.jpg";
}

async function loadRedeemForm() {
  console.log("LOAD REDEEM FORM");
  const documentURL = baseURL + "redeem.hbs";
  let docText = await fetch(documentURL, "text");
  console.log("Site text loaded: " + docText);
  let resolvedText = resolveTemplate(docText);
  console.log("\n\nResolvedText: " + docText);
  let document = pushTemplate(resolvedText);
  document.addEventListener("select", async (event) => {
    try {
      const textField = document.getElementById("redeemField");
      const value = textField.getFeature("Keyboard").text;
      console.log("Redeem Selected! " + value);
      loadRedeemSite(value);
    } catch (e) {
      var alert = createAlert(
        "Server Error",
        "There was an error loading the site."
      );
      navigationDocument.presentModal(alert);
    }
  });
}

async function loadRedeemSite(code) {
  console.log("LOAD REDEEM SITE");
  loadingTemplate();
  const documentURL = baseURL + "redeemsite.hbs/" + code;
  let docText = await fetch(documentURL, "text");
  console.log("Site text loaded: " + docText);
  let resolvedText = resolveTemplate(docText);
  console.log("\n\nResolvedText: " + docText);
  let document = replaceTemplate(resolvedText);
}

async function loadSite(index) {
  console.log("LOAD SITE: " + index);
  const documentURL = baseURL + "site.hbs/" + index;
  let docText = await fetch(documentURL, "text");
  console.log("Site text loaded: " + docText);
  let resolvedText = resolveTemplate(docText);
  console.log("\n\nResolvedText: " + docText);
  let document = pushTemplate(resolvedText);
}

async function refreshMainPage() {
  console.log("refreshMainPage");
  const newDoc = await fetch(baseURL + extension);
  const oldMain = navigationDocument.documents[0];
  navigationDocument.replaceDocument(newDoc, oldMain);
}

App.onLaunch = function (options) {
  console.log("App launch.");
  launchOptions = options;
  baseURL = options.BASEURL;
  //Templates
  configUrl = "{{CONFIG_URL}}";
  updateInterval = "{{UPDATE_INTERVAL}}";
  sessionTag = "{{SESSION_TAG}}";

  var javascriptFiles = [`${baseURL}/handlebars.js`];

  evaluateScripts(javascriptFiles, function (success) {
    if (success) {
      getJSON(configUrl).then(
        function (data) {
          try {
            console.log("Configuration data: " + JSON.stringify(data, null, 2));
            nodes = data.network.seed_nodes.fabric_api;
            console.log("Fabric Nodes: " + JSON.stringify(nodes, null, 2));
            currentHost = nodes[0];
            baseURL = options.BASEURL;
            var extension = "index.hbs";
            getTemplate(extension);
          } catch (e) {
            var alert = createAlert(
              "Server Error",
              "There was an error loading the site."
            );
            navigationDocument.presentModal(alert);
            throw "There was an error loading the site.";
          }
        },
        function (status) {
          var alert = createAlert(
            "Server Error",
            "There was an error contacting the server."
          );
          navigationDocument.presentModal(alert);
        }
      );
    } else {
      var alert = createAlert(
        "Evaluate Scripts Error",
        "There was an error attempting to evaluate the external JavaScript files.\n\n Please check your network connection and try again later."
      );
      navigationDocument.presentModal(alert);
    }
  });
};

App.onWillEnterForeground = function (options) {
  App.reload();
};
